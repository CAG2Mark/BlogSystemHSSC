<UserControl x:Class="BlogSystemHSSC.CustomControls.RichTextEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:BlogSystemHSSC.CustomControls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Border CornerRadius="4" BorderThickness="1.5" BorderBrush="{StaticResource BorderColorBrush}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="42"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
        
            <!-- Controls -->
            
            <!-- 
            
            NOTE: All icons are either made by me in Illustrator or downloaded from material icons:
            material.io/resources/icons
           
            
            -->

            <Border Background="{StaticResource Light4Brush}" CornerRadius="3 3 0 0">

                <Border.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="FontSize" Value="18"></Setter>
                        <Setter Property="FontFamily" Value="{StaticResource SourceSansProRegular}"></Setter>
                        <Setter Property="Foreground" Value="{StaticResource Dark0Brush}"></Setter>
                        <Setter Property="VerticalAlignment" Value="Center"></Setter>
                    </Style>

                    <Thickness x:Key="ButtonMargin">0 4 2 4</Thickness>

                    <sys:Double x:Key="ButtonWidth">28</sys:Double>
                    <sys:Double x:Key="ButtonHeight">28</sys:Double>


                    <Style x:Key="Separator" TargetType="Border">
                        <Setter Property="Width" Value="1"></Setter>
                        <Setter Property="Height" Value="26"></Setter>
                        <Setter Property="Background" Value="{StaticResource BorderColorDark2Brush}"></Setter>
                        <Setter Property="Margin" Value="4 2 4 0"></Setter>
                    </Style>
                    
                    <!-- Special button style for editor -->
                    
                    <Style TargetType="Button" x:Key="EditorButton">

                        <Setter Property="Background" Value="Transparent"></Setter>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#0A000000"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#16000000"></Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                </Border.Resources>

                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="3 0 0 2">

                    <local:NumericUpDown MinValue="1" MaxValue="500" ValueType="Pixels" Margin="4 0" VerticalAlignment="Center" Width="80"  
                                         CurrentValue="{Binding SelFontSize, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                         ValueChanged="FontSizeChanged"></local:NumericUpDown>

                    <Border Style="{StaticResource Separator}"></Border>
                    
                    <ToggleButton x:Name="ToggleBoldButton" ToolTip="Bold (Ctrl+B)"
                                  
                                  Margin="{StaticResource ButtonMargin}" 
                                  Width="{StaticResource ButtonWidth}" 
                                  Height="{StaticResource ButtonHeight}" 
                                  Click="boldClicked"
                                  
                                  IsChecked="{Binding IsBold, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}">
                        
                        <TextBlock FontFamily="{StaticResource SourceSansProBold}" FontSize="26" Foreground="Gray" Margin="0 0 0 2">B</TextBlock>
                    
                    </ToggleButton>

                    <ToggleButton x:Name="ToggleItalicButton" ToolTip="Italic (Ctrl+I)"
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="italicClicked"
                                  IsChecked="{Binding IsItalic, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}">
                        
                        <Path Data="{StaticResource ItalicIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <ToggleButton x:Name="ToggleUnderlineButton" ToolTip="Underline (Ctrl+U)"
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="underlineClicked"
                                  IsChecked="{Binding IsUnderline, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}">
                        <Path Data="{StaticResource UnderlineIcon}"
                              
                              Height="18"
                              Margin="0 2 0 0" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <Border Style="{StaticResource Separator}"></Border>

                    <ToggleButton x:Name="ToggleAlignLeftButton" IsChecked="True" 
                                  Command="EditingCommands.AlignLeft" 
                                  CommandTarget="{Binding ElementName=EditorTextBox}" 
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="alignClicked">
                        <Path Data="{StaticResource AlignLeftIcon}"
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <ToggleButton x:Name="ToggleAlignCenterButton" 
                                  Command="EditingCommands.AlignCenter" 
                                  CommandTarget="{Binding ElementName=EditorTextBox}" 
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="alignClicked">
                        <Path Data="{StaticResource AlignCenterIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <ToggleButton x:Name="ToggleAlignRightButton" 
                                  Command="EditingCommands.AlignRight"  
                                  CommandTarget="{Binding ElementName=EditorTextBox}" 
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="alignClicked">
                        <Path Data="{StaticResource AlignRightIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <ToggleButton x:Name="ToggleAlignJustifyButton"  
                                  Command="EditingCommands.AlignJustify"  
                                  CommandTarget="{Binding ElementName=EditorTextBox}" 
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="alignClicked">
                        <Path Data="{StaticResource AlignJustifyIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>
                        
                    </ToggleButton>

                    <Border Style="{StaticResource Separator}"></Border>

                    <Button Style="{StaticResource EditorButton}" x:Name="AddUlButton"  
                            Command="EditingCommands.ToggleBullets"  
                            CommandTarget="{Binding ElementName=EditorTextBox}" 
                            Click="addListButtonClicked"
                            Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}">
                        <Path Data="{StaticResource UlIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>

                    </Button>

                    <Button Style="{StaticResource EditorButton}" x:Name="AddOlButton"  
                            Command="EditingCommands.ToggleNumbering"  
                            CommandTarget="{Binding ElementName=EditorTextBox}" 
                            Click="addListButtonClicked"
                            Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}">
                        <Path Data="{StaticResource OlIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>

                    </Button>

                    <Button Style="{StaticResource EditorButton}" x:Name="DecreaseIndentButton"  
                            Command="EditingCommands.DecreaseIndentation"  
                            CommandTarget="{Binding ElementName=EditorTextBox}" 
                            Click="addListButtonClicked"
                            Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}">
                        <Path Data="{StaticResource IndentLeftIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>

                    </Button>

                    <Button Style="{StaticResource EditorButton}" x:Name="IncreaseIndentButton"  
                            Command="EditingCommands.IncreaseIndentation"  
                            CommandTarget="{Binding ElementName=EditorTextBox}" 
                            Click="addListButtonClicked"
                            Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}">
                        <Path Data="{StaticResource IndentRightIcon}"
                              
                              Height="16" Stretch="Uniform" Fill="Gray"></Path>

                    </Button>

                    <Border Style="{StaticResource Separator}"></Border>

                    <ToggleButton x:Name="ToggleSubscriptButton"
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="subscriptClicked"
                                  IsChecked="{Binding IsSubscript, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}"
                                  >
                        <Path Data="{StaticResource SubscriptIcon}"
                              Margin="0 3 0 0"
                              Width="16" Stretch="Uniform" Fill="Gray"></Path>

                    </ToggleButton>

                    <ToggleButton x:Name="ToggleSuperscriptButton"
                                  Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}" Click="superscriptClicked"
                                  IsChecked="{Binding IsSuperscript, Mode=TwoWay, RelativeSource={RelativeSource AncestorType=UserControl}}">
                        
                        <Path Data="{StaticResource SuperscriptIcon}"
                              Margin="0 0 0 3" Width="16" Stretch="Uniform" Fill="Gray"></Path>

                    </ToggleButton>

                    <Border Style="{StaticResource Separator}"></Border>


                    <Button Style="{StaticResource EditorButton}" x:Name="AddImageButton"  
                            Command="EditingCommands.DecreaseIndentation"  
                            CommandTarget="{Binding ElementName=EditorTextBox}" 
                            Click="addImageButtonClicked"
                            Margin="{StaticResource ButtonMargin}" Width="{StaticResource ButtonWidth}" Height="{StaticResource ButtonHeight}">
                        <Path Data="{StaticResource AddImageIcon}"
                              
                              Height="18" Margin="0 0 0 2" Stretch="Uniform" Fill="Gray"></Path>

                    </Button>

                </StackPanel>
            </Border>
        
            <!-- text box -->
            <RichTextBox x:Name="EditorTextBox"  AutoWordSelection="False"
                         
                         SpellCheck.IsEnabled="True" Grid.Row="1" 
                         
                         KeyUp="editorTextBoxKeyUp"
                         SelectionChanged="editorTextBoxSelectionChanged" 
                         TextChanged="editorTextBoxTextChanged"
                         
                         AcceptsReturn="True" 
                         AcceptsTab="True" 
                        
                         >
                
                <RichTextBox.Resources>
                    <Style TargetType="Paragraph">
                        <Setter Property="Margin" Value="0 0 0 10"/>
                    </Style>
                </RichTextBox.Resources>

                <RichTextBox.Style>
                    <Style TargetType="RichTextBox">

                        <Setter Property="FontFamily" Value="{StaticResource SourceSansProRegular}"></Setter>
                        <Setter Property="Foreground" Value="{StaticResource Dark0Brush}"></Setter>
                        <Setter Property="FontSize" Value="18"></Setter>

                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="RichTextBox">
                                    <Border x:Name="Border" CornerRadius="0 0 3 3" Background="{StaticResource Light1Brush}">
                                        <ScrollViewer x:Name="Sv" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" PreviewMouseWheel="scvMouseWheeled">
                                            <Border Width="{Binding ElementName=Sv, Path=ActualWidth}" x:Name="PART_ContentHost" Margin="4 8 8 0" Padding="0 0 8 0" VerticalAlignment="Top"></Border>
                                        </ScrollViewer>
                                    </Border>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderColorDark1Brush}"></Setter>
                                        </Trigger>
                                        <Trigger Property="IsFocused" Value="True">
                                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderColorDark2Brush}"></Setter>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>

                    </Style>
                </RichTextBox.Style>
            </RichTextBox>
        
        </Grid>
    </Border>
</UserControl>
